// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: item_tags.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const insertItemTag = `-- name: InsertItemTag :one
INSERT INTO item_tags (item_id, tag_id)
VALUES ($1, $2)
RETURNING item_id, tag_id
`

type InsertItemTagParams struct {
	ItemID uuid.UUID `json:"itemId"`
	TagID  uuid.UUID `json:"tagId"`
}

func (q *Queries) InsertItemTag(ctx context.Context, arg InsertItemTagParams) (ItemTag, error) {
	row := q.db.QueryRowContext(ctx, insertItemTag, arg.ItemID, arg.TagID)
	var i ItemTag
	err := row.Scan(&i.ItemID, &i.TagID)
	return i, err
}

const itemHaveTag = `-- name: ItemHaveTag :one
SELECT item_id, tag_id FROM item_tags
WHERE item_id = $1 AND tag_id = $2
`

type ItemHaveTagParams struct {
	ItemID uuid.UUID `json:"itemId"`
	TagID  uuid.UUID `json:"tagId"`
}

func (q *Queries) ItemHaveTag(ctx context.Context, arg ItemHaveTagParams) (ItemTag, error) {
	row := q.db.QueryRowContext(ctx, itemHaveTag, arg.ItemID, arg.TagID)
	var i ItemTag
	err := row.Scan(&i.ItemID, &i.TagID)
	return i, err
}
