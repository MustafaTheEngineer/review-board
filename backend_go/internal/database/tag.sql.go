// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tag.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const insertTag = `-- name: InsertTag :one
INSERT INTO tags (id, created_by_user_id, name)
VALUES ($1, $2, $3)
RETURNING id, created_by_user_id, name, created_at, updated_at
`

type InsertTagParams struct {
	ID              uuid.UUID     `json:"id"`
	CreatedByUserID uuid.NullUUID `json:"createdByUserId"`
	Name            string        `json:"name"`
}

func (q *Queries) InsertTag(ctx context.Context, arg InsertTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, insertTag, arg.ID, arg.CreatedByUserID, arg.Name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.CreatedByUserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectTagByName = `-- name: SelectTagByName :one
SELECT id, created_by_user_id, name, created_at, updated_at FROM tags WHERE name = $1
`

func (q *Queries) SelectTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, selectTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.CreatedByUserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
