// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: item.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const insertItem = `-- name: InsertItem :one
INSERT INTO items (id, creator_id, title, description, amount, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, creator_id, title, description, amount, risk_score, status, deleted_by_user_id, deleted_at, created_at, updated_at
`

type InsertItemParams struct {
	ID          uuid.UUID      `json:"id"`
	CreatorID   uuid.UUID      `json:"creatorId"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Amount      string         `json:"amount"`
	Status      ItemStatus     `json:"status"`
}

func (q *Queries) InsertItem(ctx context.Context, arg InsertItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, insertItem,
		arg.ID,
		arg.CreatorID,
		arg.Title,
		arg.Description,
		arg.Amount,
		arg.Status,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.Amount,
		&i.RiskScore,
		&i.Status,
		&i.DeletedByUserID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const itemById = `-- name: ItemById :one
SELECT id, creator_id, title, description, amount, risk_score, status, deleted_by_user_id, deleted_at, created_at, updated_at FROM items WHERE id = $1
`

func (q *Queries) ItemById(ctx context.Context, id uuid.UUID) (Item, error) {
	row := q.db.QueryRowContext(ctx, itemById, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.Amount,
		&i.RiskScore,
		&i.Status,
		&i.DeletedByUserID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectUserItem = `-- name: SelectUserItem :one
SELECT id, creator_id, title, description, amount, risk_score, status, deleted_by_user_id, deleted_at, created_at, updated_at FROM items WHERE creator_id = $1 AND  title = $2
`

type SelectUserItemParams struct {
	CreatorID uuid.UUID `json:"creatorId"`
	Title     string    `json:"title"`
}

func (q *Queries) SelectUserItem(ctx context.Context, arg SelectUserItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, selectUserItem, arg.CreatorID, arg.Title)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.Amount,
		&i.RiskScore,
		&i.Status,
		&i.DeletedByUserID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateItemStatus = `-- name: UpdateItemStatus :one
UPDATE items
SET status = $1
WHERE id = $2
RETURNING id, creator_id, title, description, amount, risk_score, status, deleted_by_user_id, deleted_at, created_at, updated_at
`

type UpdateItemStatusParams struct {
	Status ItemStatus `json:"status"`
	ID     uuid.UUID  `json:"id"`
}

func (q *Queries) UpdateItemStatus(ctx context.Context, arg UpdateItemStatusParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItemStatus, arg.Status, arg.ID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.Title,
		&i.Description,
		&i.Amount,
		&i.RiskScore,
		&i.Status,
		&i.DeletedByUserID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
