// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ItemStatus string

const (
	ItemStatusNEW      ItemStatus = "NEW"
	ItemStatusINREVIEW ItemStatus = "IN_REVIEW"
	ItemStatusAPPROVED ItemStatus = "APPROVED"
	ItemStatusREJECTED ItemStatus = "REJECTED"
)

func (e *ItemStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ItemStatus(s)
	case string:
		*e = ItemStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ItemStatus: %T", src)
	}
	return nil
}

type NullItemStatus struct {
	ItemStatus ItemStatus `json:"itemStatus"`
	Valid      bool       `json:"valid"` // Valid is true if ItemStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullItemStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ItemStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ItemStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullItemStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ItemStatus), nil
}

type Role string

const (
	RoleUSER  Role = "USER"
	RoleADMIN Role = "ADMIN"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type Item struct {
	ID              uuid.UUID      `json:"id"`
	CreatorID       uuid.UUID      `json:"creatorId"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	Amount          string         `json:"amount"`
	RiskScore       int32          `json:"riskScore"`
	Status          ItemStatus     `json:"status"`
	DeletedByUserID uuid.NullUUID  `json:"deletedByUserId"`
	DeletedAt       sql.NullTime   `json:"deletedAt"`
	CreatedAt       time.Time      `json:"createdAt"`
	UpdatedAt       time.Time      `json:"updatedAt"`
}

type ItemTag struct {
	ItemID uuid.UUID `json:"itemId"`
	TagID  uuid.UUID `json:"tagId"`
}

type Tag struct {
	ID              uuid.UUID     `json:"id"`
	CreatedByUserID uuid.NullUUID `json:"createdByUserId"`
	Name            string        `json:"name"`
	CreatedAt       time.Time     `json:"createdAt"`
	UpdatedAt       time.Time     `json:"updatedAt"`
}

type User struct {
	ID                       uuid.UUID      `json:"id"`
	Email                    string         `json:"email"`
	Username                 sql.NullString `json:"username"`
	Provider                 string         `json:"provider"`
	PasswordHash             string         `json:"passwordHash"`
	ResetPasswordToken       sql.NullString `json:"resetPasswordToken"`
	ResetPasswordTokenExpiry sql.NullTime   `json:"resetPasswordTokenExpiry"`
	ConfirmationToken        sql.NullString `json:"confirmationToken"`
	Confirmed                bool           `json:"confirmed"`
	Blocked                  bool           `json:"blocked"`
	Role                     Role           `json:"role"`
	VerificationCode         sql.NullString `json:"verificationCode"`
	VerificationCodeExpiry   sql.NullTime   `json:"verificationCodeExpiry"`
	Deleted                  bool           `json:"deleted"`
	DeletedAt                sql.NullTime   `json:"deletedAt"`
	LastLoginAt              sql.NullTime   `json:"lastLoginAt"`
	CurrentLoginAt           sql.NullTime   `json:"currentLoginAt"`
	CreatedAt                time.Time      `json:"createdAt"`
	UpdatedAt                time.Time      `json:"updatedAt"`
}
