// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: audit.log.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"github.com/sqlc-dev/pqtype"
)

const getAuditLogsByEntity = `-- name: GetAuditLogsByEntity :many
SELECT id, user_id, user_email, user_role, entity_type, entity_id, action, old_values, new_values, changed_fields, description, created_at FROM audit_logs
`

func (q *Queries) GetAuditLogsByEntity(ctx context.Context) ([]AuditLog, error) {
	rows, err := q.db.QueryContext(ctx, getAuditLogsByEntity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuditLog
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserEmail,
			&i.UserRole,
			&i.EntityType,
			&i.EntityID,
			&i.Action,
			&i.OldValues,
			&i.NewValues,
			pq.Array(&i.ChangedFields),
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAuditLog = `-- name: InsertAuditLog :execresult
INSERT INTO audit_logs (
    id,
    user_id,
    user_email,
    user_role,
    entity_type,
    entity_id,
    action,
    old_values,
    new_values,
    changed_fields,
    description
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type InsertAuditLogParams struct {
	ID            uuid.UUID             `json:"id"`
	UserID        uuid.NullUUID         `json:"userId"`
	UserEmail     sql.NullString        `json:"userEmail"`
	UserRole      NullRole              `json:"userRole"`
	EntityType    string                `json:"entityType"`
	EntityID      uuid.UUID             `json:"entityId"`
	Action        AuditAction           `json:"action"`
	OldValues     pqtype.NullRawMessage `json:"oldValues"`
	NewValues     pqtype.NullRawMessage `json:"newValues"`
	ChangedFields []string              `json:"changedFields"`
	Description   sql.NullString        `json:"description"`
}

func (q *Queries) InsertAuditLog(ctx context.Context, arg InsertAuditLogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertAuditLog,
		arg.ID,
		arg.UserID,
		arg.UserEmail,
		arg.UserRole,
		arg.EntityType,
		arg.EntityID,
		arg.Action,
		arg.OldValues,
		arg.NewValues,
		pq.Array(arg.ChangedFields),
		arg.Description,
	)
}
