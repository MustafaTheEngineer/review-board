// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, provider, password_hash, reset_password_token, reset_password_token_expiry, confirmation_token, confirmed, blocked, role, verification_code, verification_code_expiry, deleted, deleted_at, last_login_at, current_login_at, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Provider,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordTokenExpiry,
		&i.ConfirmationToken,
		&i.Confirmed,
		&i.Blocked,
		&i.Role,
		&i.VerificationCode,
		&i.VerificationCodeExpiry,
		&i.Deleted,
		&i.DeletedAt,
		&i.LastLoginAt,
		&i.CurrentLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (id, email, password_hash, verification_code, verification_code_expiry, provider)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, username, provider, password_hash, reset_password_token, reset_password_token_expiry, confirmation_token, confirmed, blocked, role, verification_code, verification_code_expiry, deleted, deleted_at, last_login_at, current_login_at, created_at, updated_at
`

type RegisterUserParams struct {
	ID                     uuid.UUID      `json:"id"`
	Email                  string         `json:"email"`
	PasswordHash           string         `json:"passwordHash"`
	VerificationCode       sql.NullString `json:"verificationCode"`
	VerificationCodeExpiry sql.NullTime   `json:"verificationCodeExpiry"`
	Provider               string         `json:"provider"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.VerificationCode,
		arg.VerificationCodeExpiry,
		arg.Provider,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Provider,
		&i.PasswordHash,
		&i.ResetPasswordToken,
		&i.ResetPasswordTokenExpiry,
		&i.ConfirmationToken,
		&i.Confirmed,
		&i.Blocked,
		&i.Role,
		&i.VerificationCode,
		&i.VerificationCodeExpiry,
		&i.Deleted,
		&i.DeletedAt,
		&i.LastLoginAt,
		&i.CurrentLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
