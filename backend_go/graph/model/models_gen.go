// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"github.com/MustafaTheEngineer/review_board/internal/database"
)

type MetaAndToken interface {
	IsMetaAndToken()
	GetMetadata() *APIResponse
	GetToken() string
}

type APIResponse struct {
	Code    int32         `json:"code"`
	Status  RequestStatus `json:"status"`
	Message string        `json:"message"`
	Data    any           `json:"data,omitempty"`
}

type Mutation struct {
}

type NewUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Query struct {
}

type RegisterUserResponse struct {
	Metadata *APIResponse   `json:"metadata"`
	User     *database.User `json:"user"`
	Token    string         `json:"token"`
}

func (RegisterUserResponse) IsMetaAndToken()                {}
func (this RegisterUserResponse) GetMetadata() *APIResponse { return this.Metadata }
func (this RegisterUserResponse) GetToken() string          { return this.Token }

type SignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type SignInResponse struct {
	Metadata *APIResponse   `json:"metadata"`
	User     *database.User `json:"user"`
	Token    string         `json:"token"`
}

func (SignInResponse) IsMetaAndToken()                {}
func (this SignInResponse) GetMetadata() *APIResponse { return this.Metadata }
func (this SignInResponse) GetToken() string          { return this.Token }

type RequestStatus string

const (
	RequestStatusError   RequestStatus = "ERROR"
	RequestStatusSuccess RequestStatus = "SUCCESS"
)

var AllRequestStatus = []RequestStatus{
	RequestStatusError,
	RequestStatusSuccess,
}

func (e RequestStatus) IsValid() bool {
	switch e {
	case RequestStatusError, RequestStatusSuccess:
		return true
	}
	return false
}

func (e RequestStatus) String() string {
	return string(e)
}

func (e *RequestStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RequestStatus", str)
	}
	return nil
}

func (e RequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RequestStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RequestStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
