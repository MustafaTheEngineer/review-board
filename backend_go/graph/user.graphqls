type User {
  email: String!
  username: String
  confirmed: Boolean!
  blocked: Boolean!
  role: String!
}

directive @validateEmail on FIELD_DEFINITION
directive @validatePassword on FIELD_DEFINITION
directive @checkUsername on FIELD_DEFINITION
directive @checkIfConfirmed on FIELD_DEFINITION
directive @validateUsername on FIELD_DEFINITION

extend type Query {
  userConfirmed: Boolean! @validateToken
  userHaveUsername: Boolean! @validateToken
  isUsernameTaken(username: String!): Boolean! @checkIfConfirmed @validateToken
  users(query: UsersInput): [User!]!
    @checkUsername
    @checkIfConfirmed
    @validateToken
}

type Mutation {
  registerUser(input: NewUser!): RegisterUserResponse!
    @validateEmail
    @validatePassword
  signIn(input: SignInInput!): SignInResponse! @validateEmail @validatePassword
  confirmUser(input: ConfirmUserInput!): ConfirmUserResponse! @validateToken
  setUsername(username: String!): SetUsernameResponse!
    @validateUsername
    @checkIfConfirmed
    @validateToken
}

input NewUser {
  email: String!
  password: String!
}

type RegisterUserResponse {
  message: String!
  user: User!
}

input SignInInput {
  email: String!
  password: String!
}

type SignInResponse {
  message: String!
  user: User!
}

input ConfirmUserInput {
  confirmationCode: String!
}

type ConfirmUserResponse {
  message: String!
  user: User!
}

type SetUsernameResponse {
  message: String!
  user: User!
}

input UsersInput {
  limit: Int
  offset: Int
  usernameLike: String
  emailLike: String
}
