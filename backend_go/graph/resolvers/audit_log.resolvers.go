package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"net/http"

	dbConfig "github.com/MustafaTheEngineer/review_board/config/db"
	graph "github.com/MustafaTheEngineer/review_board/graph/generated"
	"github.com/MustafaTheEngineer/review_board/helpers"
	"github.com/MustafaTheEngineer/review_board/internal/database"
)

// ID is the resolver for the id field.
func (r *auditLogResolver) ID(ctx context.Context, obj *database.AuditLog) (string, error) {
	return obj.ID.String(), nil
}

// UserID is the resolver for the userId field.
func (r *auditLogResolver) UserID(ctx context.Context, obj *database.AuditLog) (*string, error) {
	userID := obj.UserID.UUID.String()
	if !obj.UserID.Valid {
		return nil, nil
	}

	return &userID, nil
}

// UserEmail is the resolver for the userEmail field.
func (r *auditLogResolver) UserEmail(ctx context.Context, obj *database.AuditLog) (*string, error) {
	userEmail := obj.UserEmail.String
	if !obj.UserEmail.Valid {
		return nil, nil
	}

	return &userEmail, nil
}

// UserRole is the resolver for the userRole field.
func (r *auditLogResolver) UserRole(ctx context.Context, obj *database.AuditLog) (*database.Role, error) {
	userRole := obj.UserRole.Role
	if !obj.UserRole.Valid {
		return nil, nil
	}

	return &userRole, nil
}

// EntityID is the resolver for the entityId field.
func (r *auditLogResolver) EntityID(ctx context.Context, obj *database.AuditLog) (string, error) {
	return obj.EntityID.String(), nil
}

// OldValues is the resolver for the oldValues field.
func (r *auditLogResolver) OldValues(ctx context.Context, obj *database.AuditLog) (*string, error) {
	oldValues, _ := obj.OldValues.RawMessage.MarshalJSON()
	oldValuesStr := string(oldValues[:])
	return &oldValuesStr, nil
}

// NewValues is the resolver for the newValues field.
func (r *auditLogResolver) NewValues(ctx context.Context, obj *database.AuditLog) (*string, error) {
	newValues, _ := obj.NewValues.RawMessage.MarshalJSON()
	newValuesStr := string(newValues[:])
	return &newValuesStr, nil
}

// Description is the resolver for the description field.
func (r *auditLogResolver) Description(ctx context.Context, obj *database.AuditLog) (*string, error) {
	userDescription := obj.Description.String
	if !obj.Description.Valid {
		return nil, nil
	}

	return &userDescription, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *auditLogResolver) CreatedAt(ctx context.Context, obj *database.AuditLog) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// AuditLogs is the resolver for the auditLogs field.
func (r *queryResolver) AuditLogs(ctx context.Context) ([]*database.AuditLog, error) {
	dbLogs, err := dbConfig.DbCfg.Queries.GetAuditLogs(ctx)
	if err != nil {
		helpers.CreateGraphQLError(ctx, "Error while starting transaction", http.StatusInternalServerError)
		return nil, err
	}
	logs := make([]*database.AuditLog, 0, len(dbLogs))
	for _, dbLog := range dbLogs {
		logs = append(logs, &dbLog)
	}

	return logs, nil
}

// AuditLog returns graph.AuditLogResolver implementation.
func (r *Resolver) AuditLog() graph.AuditLogResolver { return &auditLogResolver{r} }

type auditLogResolver struct{ *Resolver }
